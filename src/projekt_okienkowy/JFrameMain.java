/*
Program Obsługi kont i użytkowników forum zrzeszającego fanów (Gry, LARPów, Książki, Uniwersum)
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projekt_okienkowy;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ButtonGroup;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class JFrameMain extends javax.swing.JFrame {

    /**
     * Creates new form JFrameMain
     */
    public JFrameMain() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        AddButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DelButton = new javax.swing.JButton();
        OpenButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        SaveAsButton = new javax.swing.JButton();
        UpButton = new javax.swing.JButton();
        DownButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        AddBaseButton = new javax.swing.JButton();
        ShowOneButton = new javax.swing.JButton();
        search = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AddButton.setText("Dodaj rekord");
        AddButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddButtonMouseClicked(evt);
            }
        });

        UpdateButton.setText("Aktualizuj rekord");
        UpdateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateButtonMouseClicked(evt);
            }
        });

        DelButton.setText("Usuń rekord");
        DelButton.setToolTipText("");
        DelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DelButtonMouseClicked(evt);
            }
        });

        OpenButton.setText("Otwórz plik");
        OpenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpenButtonMouseClicked(evt);
            }
        });

        SaveButton.setText("Zapisz");
        SaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveButtonMouseClicked(evt);
            }
        });

        SaveAsButton.setText("Zapisz jako...");
        SaveAsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveAsButtonMouseClicked(evt);
            }
        });

        UpButton.setText("↑");
        UpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpButtonActionPerformed(evt);
            }
        });

        DownButton.setText("↓");
        DownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownButtonActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "START"
            }
        ));
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.setEnabled(false);
        jScrollPane1.setViewportView(table);

        AddBaseButton.setText("Dodaj bazę");
        AddBaseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddBaseButtonMouseClicked(evt);
            }
        });

        ShowOneButton.setText("Wyświetl pojedyńczo");
        ShowOneButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowOneButtonMouseClicked(evt);
            }
        });

        search.setText("Wyszukaj");
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OpenButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveAsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddBaseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ShowOneButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DownButton)
                            .addComponent(UpButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(UpdateButton)
                    .addComponent(DelButton)
                    .addComponent(OpenButton)
                    .addComponent(SaveButton)
                    .addComponent(SaveAsButton)
                    .addComponent(AddBaseButton)
                    .addComponent(ShowOneButton)
                    .addComponent(search)
                    .addComponent(UpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DownButton)
                .addGap(419, 419, 419))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //zMIENNE GLOBALNE
    public boolean IsOpenFile = false;
    private ListOfUsers LOU = new ListOfUsers();  // Plik -> LOU -> Tabela
    private ListOfAccounts LOA = new ListOfAccounts();// Plik -> LOA -> Tabela
    private File file;
    private void OpenButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpenButtonMouseClicked
        isSearch=false;
        try {
            Pass pass = new Pass();
            if(!pass.GetPass()){
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory()); //Otwiera okno dialogowe otwarcia pliku
        table.setAutoCreateRowSorter(true);
        int returnValue = chooser.showOpenDialog(null);  //Wynik dzialania okienka dialogowego
        if (returnValue == JFileChooser.APPROVE_OPTION) {   //Sprawdza poprawnosc pliku
            file = chooser.getSelectedFile(); //WYBRANO PLIK DO OTWARCIA
            IsOpenFile = true;
            try {
                Scanner scan = new Scanner(file);
                String type = scan.nextLine();       //proba sczytania 1 linijki
                switch(type){
                    case "U":
                        LOU.SetFile(file);
                        ShowRecords(LOU);
                        break;
                    case "A":
                        LOA.SetFile(file);
                        ShowRecords(LOA);
                        break;
                    default:
                        break;
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
            }

        }   
    }//GEN-LAST:event_OpenButtonMouseClicked

    private void SaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveButtonMouseClicked
        isSearch=false;
        try {
            Pass pass = new Pass();
            if(!pass.GetPass()){
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(IsOpenFile){
                Scanner scan = null;
            try {
                scan = new Scanner(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            FileType = scan.nextLine();
            if(FileType.contains("U")){
                try {
                    LOU.SaveFile();
                } catch (IOException ex) {
                    Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                try {
                    LOA.SaveFile();
                } catch (IOException ex) {
                    Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else{
            SaveAsButtonMouseClicked(evt);
        }
    }//GEN-LAST:event_SaveButtonMouseClicked

    private void SaveAsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveAsButtonMouseClicked
        isSearch=false; 
        try {
            Pass pass = new Pass();
            if(!pass.GetPass()){
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        Scanner scan = null;
                try {
                    scan = new Scanner(file);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
                }
                FileType = scan.nextLine();
                if(FileType.contains("U")){
                    try {                    
                        LOU.SaveFileAs();
                    } catch (IOException ex) {
                        Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else{
                    try {
                        LOA.SaveFileAs();
                    } catch (IOException ex) {
                        Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
    }//GEN-LAST:event_SaveAsButtonMouseClicked

    private void AddBaseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddBaseButtonMouseClicked
        isSearch=false;
        try {
            Pass pass = new Pass();
            if(!pass.GetPass()){
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        JPanel panel = new JPanel();
        JRadioButton userButton = new JRadioButton("Baza Użytkowników");
        JRadioButton accountButton = new JRadioButton("Baza Kont");
        ButtonGroup group = new ButtonGroup();
        group.add(userButton);
        group.add(accountButton);
        panel.add(userButton);
        panel.add(accountButton);
        JOptionPane.showMessageDialog(null, panel);  //powoduje wyswietlenie okienka
        String name = (String)JOptionPane.showInputDialog("Podaj nazwę pliku") + ".txt";
        file = new File(name);
        if(!file.exists()){
            try {
                file.createNewFile();                
                IsOpenFile = true;
                if(accountButton.isSelected()){ 
    //Zapisywanie poprzedniego
                    LOA = new ListOfAccounts();
                    LOA.SetFileName(name);    //sekwencja inicjalizacyjna tworzenia listy LOA
                    LOA.SaveFile();
                    LOA.SetFile(file);
                }
                if(userButton.isSelected()){ 
    //Zapisywanie poprzedniego
                    LOU = new ListOfUsers();
                    LOU.SetFileName(name);
                    LOU.SaveFile();
                    LOU.SetFile(file);
                }
                
                
            } catch (IOException ex) {
                Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
            }            
            JOptionPane.showMessageDialog(null, "Plik "+name+" utworzono" , "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
            if(!accountButton.isSelected()&& !userButton.isSelected()){
                
                JOptionPane.showMessageDialog(this,
                    "Zły typ pliku",
                    "ERROR",
                       JOptionPane.ERROR_MESSAGE);
            }
               
                
           
        }
    }//GEN-LAST:event_AddBaseButtonMouseClicked

    private void AddButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddButtonMouseClicked
        isSearch=false; 
        try {
            Pass pass = new Pass();
            if(!pass.GetPass()){
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(!IsOpenFile){
            AddBaseButtonMouseClicked(evt);
        }
        Scanner scan = null;
        try {
            scan = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        FileType = scan.nextLine();
        
        JPanel panel = new JPanel();
        JLabel l1 = new JLabel();
        JLabel l2 = new JLabel();
        JLabel l3 = new JLabel();
        JLabel l4 = new JLabel();
        JLabel l5 = new JLabel();
        JLabel l6 = new JLabel();
        JTextField t1 = new JTextField();        
        JTextField t2 = new JTextField();  
        JTextField t3 = new JTextField();  
        JTextField t4 = new JTextField();  
        JTextField t5 = new JTextField();  
        JTextField t6 = new JTextField();
        if(FileType.contains("U")){            
            l1.setText("Imię");
            l2.setText("Nazwisko");
            l3.setText("EMail");
            l4.setText("Rozmiar");
            l5.setText("Rok Urodzenia");
            l6.setText("Miasto");   
        }else{
            l1.setText("Nick");
            l2.setText("EMail");
            l3.setText("Punkty");
            l4.setText("Rok Utworzenia Konta");
            l5.setText("Premium");
            l6.setText("Typ konta");   
        }
        GridLayout GL = new GridLayout(6,2);
        panel.add(l1);
        panel.add(t1);
        panel.add(l2);
        panel.add(t2);
        panel.add(l3);
        panel.add(t3);
        panel.add(l4);
        panel.add(t4);
        panel.add(l5);
        panel.add(t5);
        panel.add(l6);
        panel.add(t6);
       panel.setLayout(GL);
        JOptionPane.showMessageDialog(null, panel);
        
        String []tab = new String[6];
        tab[0]=t1.getText();
        tab[1]=t2.getText();
        tab[2]=t3.getText();
        tab[3]=t4.getText();
        tab[4]=t5.getText();
        tab[5]=t6.getText();
        if(!IsValidate(tab)){ 
            //AddButtonMouseClicked(evt);
            return;
        }
        if(FileType.contains("U")){
            LOU.add(tab);
            ShowRecords(LOU);
        }else{
            LOA.add(tab);
            ShowRecords(LOA);
        }
        
        
        
    }//GEN-LAST:event_AddButtonMouseClicked
    String FileType;
    private void ShowOneButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowOneButtonMouseClicked
        if(!IsOpenFile){
            AddBaseButtonMouseClicked(evt);
        }
        Scanner scan = null;
        try {
            scan = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        FileType = scan.nextLine();
        if(isSearch){
            if(ShowOneButton.getText().equals("Wyświetl pojedyńczo")){   
                if(FileType.contains("U")){
                    ShowOneRecord(FoundLOU,0);
                }else{
                    ShowOneRecord(FoundLOA,0);
                }
                ShowOneButton.setText("Pokaż listę");
            }else{ 
                if(FileType.contains("U")){
                    ShowRecords(FoundLOU);
                }else{
                    ShowRecords(FoundLOA);
                }
                ShowOneButton.setText("Wyświetl pojedyńczo");
            }
        }else{
            if(ShowOneButton.getText().equals("Wyświetl pojedyńczo")){   
                if(FileType.contains("U")){
                    ShowOneRecord(LOU,0);
                }else{
                    ShowOneRecord(LOA,0);
                }
                ShowOneButton.setText("Pokaż listę");
            }else{ 
                if(FileType.contains("U")){
                    ShowRecords(LOU);
                }else{
                    ShowRecords(LOA);
                }
                ShowOneButton.setText("Wyświetl pojedyńczo");
            }
        }
        
    }//GEN-LAST:event_ShowOneButtonMouseClicked
public boolean isSearch = false;
    private void UpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpButtonActionPerformed
        if(ShowOneButton.getText().equals("Pokaż listę")){
            if(isSearch){
                if(FileType.contains("U")){
                    ShowOneRecord(FoundLOU,currentPos-1);
                }else{
                    ShowOneRecord(FoundLOA,currentPos-1);
                }
            }else{
                if(FileType.contains("U")){
                    ShowOneRecord(LOU,currentPos-1);
                }else{
                    ShowOneRecord(LOA,currentPos-1);
                }
            }
            
        }
    }//GEN-LAST:event_UpButtonActionPerformed

    private void DownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownButtonActionPerformed
        if(ShowOneButton.getText().equals("Pokaż listę")){
            if(isSearch){
                if(FileType.contains("U")){
                ShowOneRecord(FoundLOU,currentPos+1);
                }else{
                ShowOneRecord(FoundLOA,currentPos+1);
                }
            }else{
                if(FileType.contains("U")){
                ShowOneRecord(LOU,currentPos+1);
                }else{
                    ShowOneRecord(LOA,currentPos+1);
                }
            }
            
        }
    }//GEN-LAST:event_DownButtonActionPerformed

    private void DelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DelButtonMouseClicked
        isSearch=false;
        try {
            Pass pass = new Pass();
            if(!pass.GetPass()){
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(ShowOneButton.getText().equals("Pokaż listę")){
            int dialogResult = JOptionPane.showConfirmDialog (null, "Czy na pewno chcesz to usunąć?","Warning",JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                if(FileType.contains("U")){
                    DelRecord(LOU);
                }else{
                    DelRecord(LOA);
                }
            }
        }
    }//GEN-LAST:event_DelButtonMouseClicked

    private void UpdateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateButtonMouseClicked
        isSearch=false;
        try {
            Pass pass = new Pass();
            if(!pass.GetPass()){
                return;
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(ShowOneButton.getText().equals("Pokaż listę")){
            if(FileType.contains("U")){
                    String[]tab = LOU.ListOfData.get(currentPos).getData().split(",");
                   if(!GetUpdateInfo(evt,tab)){
                        return;
                    }
                    DelRecord(LOU);
                    ShowOneRecord(LOU,currentPos);
                    JOptionPane.showMessageDialog(null, "Zaktualizowano", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
                }else{
                    String[]tab = LOA.ListOfData.get(currentPos).getData().split(",");
                    if(!GetUpdateInfo(evt,tab)){
                        return;
                    }
                    DelRecord(LOA);
                    ShowOneRecord(LOA,currentPos);
                    
                }
        }
    }//GEN-LAST:event_UpdateButtonMouseClicked

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        if(!search.getText().equals("Wyszukaj")){ 
            isSearch = false;
            if(FileType.contains("U")){
                ShowRecords(LOU);
            }else{
                ShowRecords(LOA);
            }
            search.setText("Wyszukaj");
            return;
        }//Zakończenie wyszukiwania
        
        Scanner scan = null;
        try {
            scan = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        FileType = scan.nextLine();
        JPanel panel = new JPanel();
        JPanel panel2 = new JPanel();
        JComboBox CB = new JComboBox();
        JTextField TF = new JTextField();
        JTextField TF2 = new JTextField();
        if(FileType.contains("U"))
        {
            CB.addItem("Imię");
            CB.addItem("Nazwisko");
            CB.addItem("eMail");
            CB.addItem("Rozmiar");
            CB.addItem("Rok Urodzenia");
            CB.addItem("Miasto");
        }else{
            CB.addItem("Nick");
            CB.addItem("eMail");
            CB.addItem("Punkty");
            CB.addItem("Rok stworzenia konta");
            CB.addItem("Premium");
            CB.addItem("Typ konta");
        }
        panel.add(CB);
        panel2.add(TF);
        GridLayout GL;
        
        JOptionPane.showMessageDialog(null, panel);
        
        if(CB.getSelectedItem().toString().equals("Rok Urodzenia")||CB.getSelectedItem().toString().equals("Punkty")||CB.getSelectedItem().toString().equals("Rok stworzenia konta")){
            panel2.add(TF2);
            GL = new GridLayout(2,1);
        }else{
            GL = new GridLayout(1,1);
        }
        
        
        panel2.setLayout(GL); 
        JOptionPane.showMessageDialog(null, panel2);//wyświetlenie textfieldów
        int index = CB.getSelectedIndex();
        
        
        if(CB.getSelectedItem().toString().equals("Rok Urodzenia")||CB.getSelectedItem().toString().equals("Punkty")||CB.getSelectedItem().toString().equals("Rok stworzenia konta")){
            int min, max;
            min = Integer.valueOf(TF.getText());
            max = Integer.valueOf(TF2.getText());
            if(FileType.contains("U")){
                LinkedList<User> found = new LinkedList<>();
                for(User u:LOU.ListOfData){ 
                    if(u.getNum(index)>= min && u.getNum(index)<=max){
                        found.add(u);
                    }
                }
                ListOfUsers founded = new ListOfUsers(found);
                ShowOneFound(founded);
            }else{
                LinkedList<Account> found = new LinkedList<Account>();
                for(Account a:LOA.ListOfData){
                    if(a.getNum(index)>= min && a.getNum(index)<=max){
                        found.add(a);
                    }
                }
                ListOfAccounts founded = new ListOfAccounts(found);
                ShowOneFound(founded);
            }
        }else{
            //Wyszukiwanie tekstowe
            String szukana = TF.getText();
            if(FileType.contains("U")){
                LinkedList<User> found = new LinkedList<>();
                for(User u:LOU.ListOfData){ 
                    if(u.get(index).equals(szukana)){
                        found.add(u);
                    }
                }
                ListOfUsers founded = new ListOfUsers(found);
                ShowOneFound(founded);
            }else{
                LinkedList<Account> found = new LinkedList<Account>();
                for(Account a:LOA.ListOfData){
                    if(a.get(index).equals(szukana)){
                        found.add(a);
                    }
                }
                ListOfAccounts founded = new ListOfAccounts(found);
                ShowOneFound(founded);
            }
        }
    }//GEN-LAST:event_searchMouseClicked
    private boolean GetUpdateInfo(java.awt.event.MouseEvent evt, String[] info){
        isSearch=false;
        Scanner scan = null;
        try {
            scan = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        FileType = scan.nextLine();
        JPanel panel = new JPanel();
        JLabel l1 = new JLabel();
        JLabel l2 = new JLabel();
        JLabel l3 = new JLabel();
        JLabel l4 = new JLabel();
        JLabel l5 = new JLabel();
        JLabel l6 = new JLabel();
        JTextField t1 = new JTextField(info[0]);        
        JTextField t2 = new JTextField(info[1]);  
        JTextField t3 = new JTextField(info[2]);  
        JTextField t4 = new JTextField(info[3]);  
        JTextField t5 = new JTextField(info[4]);  
        JTextField t6 = new JTextField(info[5]);
        if(FileType.contains("U")){            
            l1.setText("Imię");
            l2.setText("Nazwisko");
            l3.setText("EMail");
            l4.setText("Rozmiar");
            l5.setText("Rok Urodzenia");
            l6.setText("Miasto");   
        }else{
            l1.setText("Nick");
            l2.setText("EMail");
            l3.setText("Punkty");
            l4.setText("Rok Utworzenia Konta");
            l5.setText("Premium");
            l6.setText("Typ konta");   
        }
        GridLayout GL = new GridLayout(6,2);
        panel.add(l1);
        panel.add(t1);
        panel.add(l2);
        panel.add(t2);
        panel.add(l3);
        panel.add(t3);
        panel.add(l4);
        panel.add(t4);
        panel.add(l5);
        panel.add(t5);
        panel.add(l6);
        panel.add(t6);
        panel.setLayout(GL);
        JOptionPane.showMessageDialog(null, panel);
        String []tab = new String[6];
        tab[0]=t1.getText();
        tab[1]=t2.getText();
        tab[2]=t3.getText();
        tab[3]=t4.getText();
        tab[4]=t5.getText();
        tab[5]=t6.getText();
        if(!IsValidate(tab)){ 
            //GetUpdateInfo(evt,info);
            return false;
        }
        if(FileType.contains("U")){
            LOU.add(tab);
        }else{
            LOA.add(tab);
        }
        return true;
    }
    public void SaveOnExit(){
        MouseEvent evt = null;
        SaveButtonMouseClicked(evt);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrameMain MainJFrame = new JFrameMain();
                MainJFrame.setVisible(true);
                MainJFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                MainJFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        if(MainJFrame.IsOpenFile){
                            int dialogResult = JOptionPane.showConfirmDialog (null, "Czy zapisać zmiany?","Warning",JOptionPane.YES_NO_OPTION);
                            if(dialogResult == JOptionPane.YES_OPTION){
                                MainJFrame.SaveOnExit();
                            }
                        } else {
                        }
                       
                    }
                   
                });
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBaseButton;
    private javax.swing.JButton AddButton;
    private javax.swing.JButton DelButton;
    private javax.swing.JButton DownButton;
    private javax.swing.JButton OpenButton;
    private javax.swing.JButton SaveAsButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton ShowOneButton;
    private javax.swing.JButton UpButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton search;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public String[] LOUheader = {"Imię","Nazwisko","EMail","Rozmiar","Rok Urodzenia","Miasto"}; //przypisanie naglowkow
    private void ShowRecords(ListOfUsers LOU) {
        table.setAutoCreateRowSorter(true);
        DefaultTableModel model = new DefaultTableModel();
        int rCount = model.getRowCount();
        for (int i = rCount - 1; i >= 0; i--) {
            model.removeRow(i);                  
        }//usunięcie istniejace  wiersze tabeli
        model.setColumnIdentifiers(LOUheader);
        for(int i = 0; i<LOU.ListOfData.size();i++){
            model.addRow(LOU.ListOfData.get(i).getData().split(","));  //przekazanie danych do modelu
        }
        table.setModel(model);
    }
    public String[] LOAheader = {"Nick","EMail","Punkty","Rok Utworzenia Konta","Premium","Typ konta"};
    private void ShowRecords(ListOfAccounts LOA) {
        table.setAutoCreateRowSorter(true);
        DefaultTableModel model = new DefaultTableModel();
        int rCount = model.getRowCount();
        for (int i = rCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        model.setColumnIdentifiers(LOAheader);
        for(int i = 0; i<LOA.ListOfData.size();i++){
            model.addRow(LOA.ListOfData.get(i).getData().split(","));
        }
        table.setModel(model);
    }

    private boolean IsValidate(String[] tab) {
        Pattern BigName = Pattern.compile("[A-Z][a-z]+");
        Pattern email = Pattern.compile("[a-z0-9_.-]+@[a-z0-9_.-]+");
        Pattern size = Pattern.compile("X?X?[MLS]{1}");
        Pattern date = Pattern.compile("[0-9]{4}");
        Pattern Nick = Pattern.compile("[A-Za-z0-9]{5,20}");
        Pattern points = Pattern.compile("[0-9]{1,5}");
        Pattern prem = Pattern.compile("[TN]");
        Pattern type = Pattern.compile("[AUM]");
        
        if(FileType.contains("U")){
            Matcher matcher = BigName.matcher(tab[0]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Złe imię",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = BigName.matcher(tab[1]); 
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Złe nazwisko",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = email.matcher(tab[2]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Zły email",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = size.matcher(tab[3]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Zły rozmiar",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = date.matcher(tab[4]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Zła data FORMAT yyyy",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = BigName.matcher(tab[5]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Złe miasto",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            return true;
        }else{
            Matcher matcher = Nick.matcher(tab[0]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Zły nick",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = email.matcher(tab[1]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Zły email",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = points.matcher(tab[2]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Złe punkty",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = date.matcher(tab[3]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Zła data FORMAT yyyy",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = prem.matcher(tab[4]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Czy Premium [T/N]",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            matcher = type.matcher(tab[5]);
            if(!matcher.matches()){
                JOptionPane.showMessageDialog(this,
                "Typ Konta [M/A/U]",
                "warning",
                JOptionPane.WARNING_MESSAGE);
                return false;
            }
            return true;
        }  
    }

    int currentPos = 0;
    private void ShowOneRecord(ListOfUsers list, int pos) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rCount = model.getRowCount();
        for (int i = rCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        model.setColumnIdentifiers(LOUheader);
        if(list.ListOfData.size()<=pos||pos<0){
            pos= currentPos;
        }else{
            currentPos = pos;
        }//zabezpieczenie przed wyjściem z zakresu listy
        model.addRow(list.ListOfData.get(pos).getData().split(","));
    }

    private void ShowOneRecord(ListOfAccounts list, int pos) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rCount = model.getRowCount();
        for (int i = rCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        model.setColumnIdentifiers(LOAheader);
        if(list.ListOfData.size()<=pos||pos<0){
            pos= currentPos;
        }else{
            currentPos = pos;
        }
        model.addRow(list.ListOfData.get(pos).getData().split(","));
    }

    private void DelRecord(ListOfUsers LOU) {
        LOU.ListOfData.remove(currentPos);
        if(currentPos>0){
            currentPos--;
        }else{
            if(LOU.ListOfData.size()<=0){
               JOptionPane.showMessageDialog(null, "Lista Jest Pusta", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
               ShowRecords(LOU);
               return;
            }
        }
        ShowOneRecord(LOU,currentPos);
    }

    private void DelRecord(ListOfAccounts LOA) {
            LOA.ListOfData.remove(currentPos);
        if(currentPos>0){
            currentPos--;
        }else{
            if(LOA.ListOfData.size()<=0){
               JOptionPane.showMessageDialog(null, "Lista Jest Pusta", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
               ShowRecords(LOA);
               return;
            }
        }
        ShowOneRecord(LOA,currentPos);
    }
    ListOfAccounts FoundLOA;
    private void ShowOneFound(ListOfAccounts found){
        FoundLOA = found;
        isSearch = true;
        FileType = "A";
        if(ShowOneButton.getText().equals("Wyświetl pojedyńczo")){   
            ShowOneRecord(found,0);
            ShowOneButton.setText("Pokaż listę");
        }else{           
            ShowRecords(found);
            ShowOneButton.setText("Wyświetl pojedyńczo");
        }
    }    
    ListOfUsers FoundLOU;
    private void ShowOneFound(ListOfUsers found){
        FoundLOU = found;
        isSearch = true;
        FileType = "U";
        ShowOneRecord(FoundLOU,0);
        search.setText("Zakończ szukanie");
        if(ShowOneButton.getText().equals("Wyświetl pojedyńczo")){   
            ShowOneButton.setText("Pokaż listę");
        }
    }
   
}
